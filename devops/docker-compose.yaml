version: "3"
services:

  api01: &api
    image: victoremerick/khipo:latest
    build:
      context: ../
      dockerfile: ./devops/Dockerfile
    hostname: api01
    environment:
      - DB_HOSTNAME=jdbc:postgresql://postgres:5432/khipo
      - DB_USER=khipo
      - DB_PASSWORD=khipo

    # Não é necessário expor qualquer porta além da porta do load balancer,
    # mas é comum as pessoas o fazerem para testarem suas APIs e conectarem
    # ao banco de dados na fase de desenvolvimento.
    ports:
      - "8081:8080"
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          cpus: "0.6"
          memory: "200MB"

  api02:
      # Essa sintaxe reusa o que foi declarado em 'api01'.
      <<: *api
      hostname: api02
      environment:
        - DB_HOSTNAME=jdbc:postgresql://postgres:5432/khipo
        - DB_USER=khipo
        - DB_PASSWORD=khipo
      ports:
        - "8082:8080"
      depends_on:
        - postgres
      deploy:
        resources:
          limits:
            cpus: "0.6"
            memory: "200MB"

  nginx:
      hostname: nginx
      image: nginx:latest
      volumes:
        - ./nginx.conf:/etc/nginx/nginx.conf:ro
      depends_on:
        - api01
        - api02
      ports:
        - "9999:9999"
      deploy:
        resources:
          limits:
            cpus: "0.17"
            memory: "10MB"


  postgres:
    container_name: 'postgres'
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=khipo'
      - 'POSTGRES_PASSWORD=khipo'
      - 'POSTGRES_USER=khipo'
    ports:
      - "5432:5432"

  react-app:
    container_name: 'frontend'
    image: node:14-alpine
    depends_on:
      - nginx
    ports:
      - "3000:3000"
    volumes:
      - ../frontend/khipo-frontend-teste:/app
    working_dir: /app
    command: npm start
